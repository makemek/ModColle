#!/usr/bin/env node

const winston = require('winston');
const nconf = require('nconf');
loadConfig();
setupLogger();
const app = require('../src/');
const http = require('http');

function loadConfig() {
  nconf.argv().env();
  nconf.add('settings', {type: 'file', file: 'src/config/settings.json'});
  nconf.add('logger', {type: 'file', file: 'src/config/loggerSettings.json'});
}

function setupLogger() {
  var loggerConfig = nconf.get('logger');
  Object.keys(loggerConfig).forEach(function(key) {
      winston.loggers.add(key, loggerConfig[key]);
  });
}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      winston.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      winston.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  winston.info('modcolle is listening on ' + bind);
}
